import numpy as np

class Synapse:
    def __init__(self, pre_neuron, post_neuron, weight=0.1, delay=1.0, tau=5.0, syn_type="excitatory"):
        """
        Initialize the synapse.
        
        Args:
        - pre_neuron: The presynaptic neuron (an instance of the SCM class).
        - post_neuron: The postsynaptic neuron (an instance of the SCM class).
        - weight: Synaptic weight (strength of connection).
        - delay: Synapse relaxation delay in ms.
        - tau: Time constant for synaptic current decay in ms
        - syn_type: Type of synapse ('excitatory' or 'inhibitory').
        """
        self.pre_neuron = pre_neuron
        self.post_neuron = post_neuron
        self.weight = weight
        self.delay = delay
        self.tau = tau
        self.syn_type = syn_type
        
        # Variables for synaptic dynamics
        self.syn_current = 0.0
        self.last_spike_time = -np.inf  # Keeps track of the last presynaptic spike

    def step(self, t, dt):
        """
        Update the synaptic current based on the presynaptic activity.
        
        Args:
        - t: Current simulation time (ms).
        - dt: Time step (ms).
        """
        # Check if the presynaptic neuron has spiked
        if self.pre_neuron.spiked() and (t - self.last_spike_time > self.delay):
            self.last_spike_time = t
            if self.syn_type == "excitatory":
                self.syn_current += self.weight
            elif self.syn_type == "inhibitory":
                self.syn_current -= self.weight

        # Decay the synaptic current
        self.syn_current *= np.exp(-dt / self.tau)

    def get_current(self):
        """
        Get the current generated by this synapse for the postsynaptic neuron.
        """
        return self.syn_current



