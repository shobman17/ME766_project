#ifndef NN_H
#define NN_H

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <limits>
#include <string>

class FCM {
public:
    // Constructor with optional index parameter
    explicit FCM(int idx = 0);

    // Setter and getter methods
    void set_index(int new_index);
    int get_index();
    double get_Vm();
    double get_V_rest();

    // Check if neuron has spiked
    bool spiked() const;

    // Simulation step method
    void step(double curr_input, double dt = 0.01);

    // Gating function declarations
    static double alpha_n_K_fast(double v);
    static double beta_n_K_fast(double v);
    static double alpha_n_K_slow(double v);
    static double beta_n_K_slow(double v);
    static double n_K_fast_inf(double v);
    static double tau_n_K_fast(double v);
    static double n_K_slow_inf(double v);
    static double tau_n_K_slow(double v);
    static double m_Na_inf(double v);
    static double h_Na_inf(double v);
    static double s_Na_inf(double v);
    static double tau_m_Na(double v);
    static double tau_h_Na(double v);
    static double tau_s_Na(double v);
    static double m_Ca_T_inf(double v);
    static double h_Ca_T_inf(double v);
    static double tau_m_Ca_T(double v);
    static double tau_h_Ca_T(double v);
    static double alpha_y_HCN(double v);
    static double beta_y_HCN(double v);
    static double y_HCN_inf(double v);
    static double tau_y_HCN(double v);
    static double alpha_c_Ca_L(double v);
    static double beta_c_Ca_L(double v);
    static double c_Ca_L_inf(double v);
    static double tau_c_Ca_L(double v);

    // Helper function for channel state update
    void update_channel_state(
        std::vector<double>& state, 
        double K, 
        double dt,
        double (*inf_func)(double), 
        double (*tau_func)(double)
    );

private:

    // Member variables
    int index;
    double V_rest, V_thresh, E_l, Cm;
    double E_po, E_Na, E_ca, E_HC, E_ct, RA, ro_ex;
    double K_m_Na, K_h_Na, K_s_Na, K_m_Ca_T, K_h_Ca_T, K_n_K_fast, K_n_K_slow, K_c_Ca_L, K_y_HCN;

    // Nested struct for channel states
    struct ChannelStates {
        std::vector<double> m_Na, h_Na, s_Na;
        std::vector<double> m_Ca_T, h_Ca_T;
        std::vector<double> n_K_fast, n_K_slow;
        std::vector<double> c_Ca_L; 
        std::vector<double> y_HCN;
    } channel_states;

    // Additional member variables
    std::vector<std::vector<double>> Con_Mat;
    std::vector<std::vector<double>> Inv_Con_Mat;
    int num_rows;
    std::vector<double> surfaces, Vm;
    std::vector<double> gbar_l_vec, gbar_Na_vec, gbar_ca_vec, gbar_kd_vec, gbar_k7_vec, gbar_HC_vec, gbar_ct_vec;
};

class Synapse {
private:
    FCM* pre_neuron;   // Presynaptic neuron
    FCM* post_neuron;  // Postsynaptic neuron
    double weight;        // Synaptic weight
    double delay;         // Synapse relaxation delay in ms
    double tau;           // Time constant for synaptic current decay in ms
    std::string syn_type; // Type of synapse: "excitatory" or "inhibitory"
    double syn_current;   // Current generated by the synapse
    double last_spike_time; // Last time the presynaptic neuron spiked

public:
    // Constructor to initialize the synapse
    Synapse(FCM* pre, 
        FCM* post, 
        double weight = 0.1, 
        double delay = 1.0, 
        double tau = 5.0, 
        const std::string& type = "excitatory");

    // Method to update the synaptic current
    void step(double t, double dt);

    // Method to get the current generated by the synapse
    double get_current() const;

    // Get synapse type
    std::string get_type() const;

    // Get postsynaptic neuron
    FCM* get_post_neuron();

    // Get presynaptic neuron
    FCM* get_pre_neuron();
};

class Network {
private: 
    
public:
    // Containers for neurons, synapses, and input currents
    std::vector<FCM*> neurons;
    std::vector<Synapse*> synapses;
    std::vector<double> input_currents;

    // Default constructor
    Network();

    int num_neurons();
    int add_neuron();

    void connect(int pre_index,
                 int post_index,
                 double weight = 0.1,
                 double delay = 1.0,
                 double tau = 5.0,
                 std::string syn_type = "excitatory");

    std::vector<double> step(std::vector<double>& external_current, 
                              double t, 
                              double dt);
};

#endif // NN_H