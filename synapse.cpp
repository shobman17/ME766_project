#include <cmath>    // For exp and std::isinf
#include <limits>   // For std::numeric_limits
#include <string>   // For std::string

class Synapse {
private:
    FCM* pre_neuron;   // Presynaptic neuron
    FCM* post_neuron;  // Postsynaptic neuron
    double weight;        // Synaptic weight
    double delay;         // Synapse relaxation delay in ms
    double tau;           // Time constant for synaptic current decay in ms
    std::string syn_type; // Type of synapse: "excitatory" or "inhibitory"
    double syn_current;   // Current generated by the synapse
    double last_spike_time; // Last time the presynaptic neuron spiked

public:
    // Constructor to initialize the synapse
    Synapse(FCM* pre, FCM* post, double weight = 0.1, double delay = 1.0, 
            double tau = 5.0, const std::string& type = "excitatory")
        : pre_neuron(pre), post_neuron(post), weight(weight), delay(delay), 
          tau(tau), syn_type(type), syn_current(0.0), 
          last_spike_time(-std::numeric_limits<double>::infinity()) {}

    // Method to update the synaptic current
    void step(double t, double dt) {
        // Check if the presynaptic neuron has spiked
        if (pre_neuron->spiked() && (t - last_spike_time > delay)) {
            last_spike_time = t;
            if (syn_type == "excitatory") {
                syn_current += weight;
            } else if (syn_type == "inhibitory") {
                syn_current -= weight;
            }
        }

        // Decay the synaptic current
        syn_current *= std::exp(-dt / tau);
    }

    // Method to get the current generated by the synapse
    double get_current() const {
        return syn_current;
    }
};